<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\Framing\Method;

use ButterAMQP\Buffer;
use ButterAMQP\Framing\Method;
use ButterAMQP\Value;

/**
 * Delete a queue.
 *
 * @codeCoverageIgnore
 */
class QueueDelete extends Method
{
    /**
     * @var int
     */
    private $reserved1;

    /**
     * @var string
     */
    private $queue;

    /**
     * @var bool
     */
    private $ifUnused;

    /**
     * @var bool
     */
    private $ifEmpty;

    /**
     * @var bool
     */
    private $noWait;

    /**
     * @param int    $reserved1
     * @param string $queue
     * @param bool   $ifUnused
     * @param bool   $ifEmpty
     * @param bool   $noWait
     */
    public function __construct($reserved1, $queue, $ifUnused, $ifEmpty, $noWait)
    {
        $this->reserved1 = $reserved1;
        $this->queue = $queue;
        $this->ifUnused = $ifUnused;
        $this->ifEmpty = $ifEmpty;
        $this->noWait = $noWait;
    }

    /**
     * Reserved1.
     *
     * @return int
     */
    public function getReserved1()
    {
        return $this->reserved1;
    }

    /**
     * Queue.
     *
     * @return string
     */
    public function getQueue()
    {
        return $this->queue;
    }

    /**
     * Delete only if unused.
     *
     * @return bool
     */
    public function isIfUnused()
    {
        return $this->ifUnused;
    }

    /**
     * Delete only if empty.
     *
     * @return bool
     */
    public function isIfEmpty()
    {
        return $this->ifEmpty;
    }

    /**
     * NoWait.
     *
     * @return bool
     */
    public function isNoWait()
    {
        return $this->noWait;
    }

    /**
     * @return string
     */
    public function encode()
    {
        return "\x00\x32\x00\x28".
            Value\ShortValue::encode($this->reserved1).
            Value\ShortStringValue::encode($this->queue).
            Value\OctetValue::encode(($this->ifUnused ? 1 : 0) | (($this->ifEmpty ? 1 : 0) << 1) | (($this->noWait ? 1 : 0) << 2));
    }

    /**
     * @param Buffer $data
     *
     * @return $this
     */
    public static function decode(Buffer $data)
    {
        return new self(
            Value\ShortValue::decode($data),
            Value\ShortStringValue::decode($data),
            (bool) ($flags = Value\OctetValue::decode($data)) & 1,
            (bool) $flags & 2,
            (bool) $flags & 4
        );
    }
}
