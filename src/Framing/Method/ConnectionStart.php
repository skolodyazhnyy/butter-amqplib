<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\Framing\Method;

use ButterAMQP\Framing\Frame;
use ButterAMQP\Value;

/**
 * Start connection negotiation.
 *
 * @codeCoverageIgnore
 */
class ConnectionStart extends Frame
{
    /**
     * @var int
     */
    private $versionMajor;

    /**
     * @var int
     */
    private $versionMinor;

    /**
     * @var array
     */
    private $serverProperties = [];

    /**
     * @var string
     */
    private $mechanisms;

    /**
     * @var string
     */
    private $locales;

    /**
     * @param int    $channel
     * @param int    $versionMajor
     * @param int    $versionMinor
     * @param array  $serverProperties
     * @param string $mechanisms
     * @param string $locales
     */
    public function __construct($channel, $versionMajor, $versionMinor, $serverProperties, $mechanisms, $locales)
    {
        $this->versionMajor = $versionMajor;
        $this->versionMinor = $versionMinor;
        $this->serverProperties = $serverProperties;
        $this->mechanisms = $mechanisms;
        $this->locales = $locales;

        parent::__construct($channel);
    }

    /**
     * Protocol major version.
     *
     * @return int
     */
    public function getVersionMajor()
    {
        return $this->versionMajor;
    }

    /**
     * Protocol minor version.
     *
     * @return int
     */
    public function getVersionMinor()
    {
        return $this->versionMinor;
    }

    /**
     * Server properties.
     *
     * @return array
     */
    public function getServerProperties()
    {
        return $this->serverProperties;
    }

    /**
     * Available security mechanisms.
     *
     * @return string
     */
    public function getMechanisms()
    {
        return $this->mechanisms;
    }

    /**
     * Available message locales.
     *
     * @return string
     */
    public function getLocales()
    {
        return $this->locales;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $data = "\x00\x0A\x00\x0A".
            Value\OctetValue::encode($this->versionMajor).
            Value\OctetValue::encode($this->versionMinor).
            Value\TableValue::encode($this->serverProperties).
            Value\LongStringValue::encode($this->mechanisms).
            Value\LongStringValue::encode($this->locales);

        return "\x01".pack('nN', $this->channel, strlen($data)).$data."\xCE";
    }
}
