<?php
/*
 * This file is automatically generated.
 */

namespace AMQLib\Framing\Method;

use AMQLib\Buffer;
use AMQLib\Framing\Method;
use AMQLib\Value;

/**
 * Request a connection close.
 */
class ConnectionClose extends Method
{
    /**
     * @var int
     */
    private $replyCode;

    /**
     * @var string
     */
    private $replyText;

    /**
     * @var int
     */
    private $classId;

    /**
     * @var int
     */
    private $methodId;

    /**
     * @param int    $replyCode
     * @param string $replyText
     * @param int    $classId
     * @param int    $methodId
     */
    public function __construct($replyCode, $replyText, $classId, $methodId)
    {
        $this->replyCode = $replyCode;
        $this->replyText = $replyText;
        $this->classId = $classId;
        $this->methodId = $methodId;
    }

    /**
     * ReplyCode.
     *
     * @return int
     */
    public function getReplyCode()
    {
        return $this->replyCode;
    }

    /**
     * ReplyText.
     *
     * @return string
     */
    public function getReplyText()
    {
        return $this->replyText;
    }

    /**
     * Failing method class.
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->classId;
    }

    /**
     * Failing method ID.
     *
     * @return int
     */
    public function getMethodId()
    {
        return $this->methodId;
    }

    /**
     * @return string
     */
    public function encode()
    {
        return "\x00\x0A\x00\x32".
            Value\ShortValue::encode($this->replyCode).
            Value\ShortStringValue::encode($this->replyText).
            Value\ShortValue::encode($this->classId).
            Value\ShortValue::encode($this->methodId);
    }

    /**
     * @param Buffer $data
     *
     * @return $this
     */
    public static function decode(Buffer $data)
    {
        return new self(
            Value\ShortValue::decode($data),
            Value\ShortStringValue::decode($data),
            Value\ShortValue::decode($data),
            Value\ShortValue::decode($data)
        );
    }
}
