<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\Framing\Method;

use ButterAMQP\Framing\Frame;
use ButterAMQP\Value;

/**
 * Verify exchange exists, create if needed.
 *
 * @codeCoverageIgnore
 */
class ExchangeDeclare extends Frame
{
    /**
     * @var int
     */
    private $reserved1;

    /**
     * @var string
     */
    private $exchange;

    /**
     * @var string
     */
    private $type;

    /**
     * @var bool
     */
    private $passive;

    /**
     * @var bool
     */
    private $durable;

    /**
     * @var bool
     */
    private $autoDelete;

    /**
     * @var bool
     */
    private $internal;

    /**
     * @var bool
     */
    private $noWait;

    /**
     * @var array
     */
    private $arguments = [];

    /**
     * @param int    $channel
     * @param int    $reserved1
     * @param string $exchange
     * @param string $type
     * @param bool   $passive
     * @param bool   $durable
     * @param bool   $autoDelete
     * @param bool   $internal
     * @param bool   $noWait
     * @param array  $arguments
     */
    public function __construct($channel, $reserved1, $exchange, $type, $passive, $durable, $autoDelete, $internal, $noWait, $arguments)
    {
        $this->reserved1 = $reserved1;
        $this->exchange = $exchange;
        $this->type = $type;
        $this->passive = $passive;
        $this->durable = $durable;
        $this->autoDelete = $autoDelete;
        $this->internal = $internal;
        $this->noWait = $noWait;
        $this->arguments = $arguments;

        parent::__construct($channel);
    }

    /**
     * Reserved1.
     *
     * @return int
     */
    public function getReserved1()
    {
        return $this->reserved1;
    }

    /**
     * Exchange.
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * Exchange type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Do not create exchange.
     *
     * @return bool
     */
    public function isPassive()
    {
        return $this->passive;
    }

    /**
     * Request a durable exchange.
     *
     * @return bool
     */
    public function isDurable()
    {
        return $this->durable;
    }

    /**
     * Auto-delete when unused.
     *
     * @return bool
     */
    public function isAutoDelete()
    {
        return $this->autoDelete;
    }

    /**
     * Create internal exchange.
     *
     * @return bool
     */
    public function isInternal()
    {
        return $this->internal;
    }

    /**
     * NoWait.
     *
     * @return bool
     */
    public function isNoWait()
    {
        return $this->noWait;
    }

    /**
     * Arguments for declaration.
     *
     * @return array
     */
    public function getArguments()
    {
        return $this->arguments;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $data = "\x00\x28\x00\x0A".
            Value\ShortValue::encode($this->reserved1).
            Value\ShortStringValue::encode($this->exchange).
            Value\ShortStringValue::encode($this->type).
            Value\OctetValue::encode(($this->passive ? 1 : 0) | (($this->durable ? 1 : 0) << 1) | (($this->autoDelete ? 1 : 0) << 2) | (($this->internal ? 1 : 0) << 3) | (($this->noWait ? 1 : 0) << 4)).
            Value\TableValue::encode($this->arguments);

        return "\x01".pack('nN', $this->channel, strlen($data)).$data."\xCE";
    }
}
