<?php
/*
 * This file is automatically generated.
 */

namespace AMQLib\Framing\Method;

use AMQLib\Buffer;
use AMQLib\Framing\Method;
use AMQLib\Value;

/**
 * Confirms a queue definition.
 */
class QueueDeclareOk extends Method
{
    /**
     * @var string
     */
    private $queue;

    /**
     * @var int
     */
    private $messageCount;

    /**
     * @var int
     */
    private $consumerCount;

    /**
     * @param string $queue
     * @param int    $messageCount
     * @param int    $consumerCount
     */
    public function __construct($queue, $messageCount, $consumerCount)
    {
        $this->queue = $queue;
        $this->messageCount = $messageCount;
        $this->consumerCount = $consumerCount;
    }

    /**
     * Queue.
     *
     * @return string
     */
    public function getQueue()
    {
        return $this->queue;
    }

    /**
     * MessageCount.
     *
     * @return int
     */
    public function getMessageCount()
    {
        return $this->messageCount;
    }

    /**
     * Number of consumers.
     *
     * @return int
     */
    public function getConsumerCount()
    {
        return $this->consumerCount;
    }

    /**
     * @return string
     */
    public function encode()
    {
        return "\x00\x32\x00\x0B".
            Value\ShortStringValue::encode($this->queue).
            Value\LongValue::encode($this->messageCount).
            Value\LongValue::encode($this->consumerCount);
    }

    /**
     * @param Buffer $data
     *
     * @return $this
     */
    public static function decode(Buffer $data)
    {
        return new self(
            Value\ShortStringValue::decode($data),
            Value\LongValue::decode($data),
            Value\LongValue::decode($data)
        );
    }
}
