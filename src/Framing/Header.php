<?php
/*
 * This file is automatically generated.
 */

namespace AMQLib\Framing;

use AMQLib\Buffer;
use AMQLib\Value;

class Header extends Frame
{
    /**
     * @var int
     */
    private $classId;

    /**
     * @var int
     */
    private $weight;

    /**
     * @var int
     */
    private $size;

    /**
     * @var array
     */
    private $properties = [];

    /**
     * @param int   $classId
     * @param int   $weight
     * @param int   $size
     * @param array $properties
     */
    public function __construct($classId, $weight, $size, array $properties = [])
    {
        $this->classId = $classId;
        $this->weight = $weight;
        $this->size = $size;
        $this->properties = $properties;
    }

    /**
     * @return int
     */
    public function getClassId()
    {
        return $this->classId;
    }

    /**
     * @return int
     */
    public function getWeight()
    {
        return $this->weight;
    }

    /**
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * @return array
     */
    public function getProperties()
    {
        return $this->properties;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $properties = '';
        $flags = 0;

        if (array_key_exists('content-type', $this->properties)) {
            $flags |= 32768;
            $properties .= Value\ShortStringValue::encode($this->properties['content-type']);
        }

        if (array_key_exists('content-encoding', $this->properties)) {
            $flags |= 16384;
            $properties .= Value\ShortStringValue::encode($this->properties['content-encoding']);
        }

        if (array_key_exists('headers', $this->properties)) {
            $flags |= 8192;
            $properties .= Value\TableValue::encode($this->properties['headers']);
        }

        if (array_key_exists('delivery-mode', $this->properties)) {
            $flags |= 4096;
            $properties .= Value\OctetValue::encode($this->properties['delivery-mode']);
        }

        if (array_key_exists('priority', $this->properties)) {
            $flags |= 2048;
            $properties .= Value\OctetValue::encode($this->properties['priority']);
        }

        if (array_key_exists('correlation-id', $this->properties)) {
            $flags |= 1024;
            $properties .= Value\ShortStringValue::encode($this->properties['correlation-id']);
        }

        if (array_key_exists('reply-to', $this->properties)) {
            $flags |= 512;
            $properties .= Value\ShortStringValue::encode($this->properties['reply-to']);
        }

        if (array_key_exists('expiration', $this->properties)) {
            $flags |= 256;
            $properties .= Value\ShortStringValue::encode($this->properties['expiration']);
        }

        if (array_key_exists('message-id', $this->properties)) {
            $flags |= 128;
            $properties .= Value\ShortStringValue::encode($this->properties['message-id']);
        }

        if (array_key_exists('timestamp', $this->properties)) {
            $flags |= 64;
            $properties .= Value\LongLongValue::encode($this->properties['timestamp']);
        }

        if (array_key_exists('type', $this->properties)) {
            $flags |= 32;
            $properties .= Value\ShortStringValue::encode($this->properties['type']);
        }

        if (array_key_exists('user-id', $this->properties)) {
            $flags |= 16;
            $properties .= Value\ShortStringValue::encode($this->properties['user-id']);
        }

        if (array_key_exists('app-id', $this->properties)) {
            $flags |= 8;
            $properties .= Value\ShortStringValue::encode($this->properties['app-id']);
        }

        if (array_key_exists('reserved', $this->properties)) {
            $flags |= 4;
            $properties .= Value\ShortStringValue::encode($this->properties['reserved']);
        }

        return Value\ShortValue::encode($this->classId).
            Value\ShortValue::encode($this->weight).
            Value\LongLongValue::encode($this->size).
            Value\ShortValue::encode($flags).
            $properties;
    }

    /**
     * @param Buffer $data
     *
     * @return $this
     */
    public static function decode(Buffer $data)
    {
        $class = Value\ShortValue::decode($data);
        $weight = Value\ShortValue::decode($data);
        $size = Value\LongLongValue::decode($data);
        $flags = Value\ShortValue::decode($data);

        $properties = [];

        if ($flags & 32768) {
            $properties['content-type'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 16384) {
            $properties['content-encoding'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 8192) {
            $properties['headers'] = Value\TableValue::decode($data);
        }

        if ($flags & 4096) {
            $properties['delivery-mode'] = Value\OctetValue::decode($data);
        }

        if ($flags & 2048) {
            $properties['priority'] = Value\OctetValue::decode($data);
        }

        if ($flags & 1024) {
            $properties['correlation-id'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 512) {
            $properties['reply-to'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 256) {
            $properties['expiration'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 128) {
            $properties['message-id'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 64) {
            $properties['timestamp'] = Value\LongLongValue::decode($data);
        }

        if ($flags & 32) {
            $properties['type'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 16) {
            $properties['user-id'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 8) {
            $properties['app-id'] = Value\ShortStringValue::decode($data);
        }

        if ($flags & 4) {
            $properties['reserved'] = Value\ShortStringValue::decode($data);
        }

        return new self($class, $weight, $size, $properties);
    }

    /**
     * {@inheritdoc}
     */
    public function getFrameType()
    {
        return "\x02";
    }
}
