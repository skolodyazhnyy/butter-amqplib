<?php
/*
 * This file is automatically generated.
 */

namespace AMQLib\Framing;

use AMQLib\Buffer;
use AMQLib\Binary;

/**
 * @codeCoverageIgnore
 */
abstract class Method extends Frame
{
    /**
     * @param Buffer $data
     *
     * @return $this
     */
    public static function decode(Buffer $data)
    {
        $class = $data->read(2);
        $method = $data->read(2);

        switch ($class) {
            case "\x00\x0A":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\ConnectionStart::decode($data);
                    case "\x00\x0B":
                        return Method\ConnectionStartOk::decode($data);
                    case "\x00\x14":
                        return Method\ConnectionSecure::decode($data);
                    case "\x00\x15":
                        return Method\ConnectionSecureOk::decode($data);
                    case "\x00\x1E":
                        return Method\ConnectionTune::decode($data);
                    case "\x00\x1F":
                        return Method\ConnectionTuneOk::decode($data);
                    case "\x00\x28":
                        return Method\ConnectionOpen::decode($data);
                    case "\x00\x29":
                        return Method\ConnectionOpenOk::decode($data);
                    case "\x00\x32":
                        return Method\ConnectionClose::decode($data);
                    case "\x00\x33":
                        return Method\ConnectionCloseOk::decode($data);
                    case "\x00\x3C":
                        return Method\ConnectionBlocked::decode($data);
                    case "\x00\x3D":
                        return Method\ConnectionUnblocked::decode($data);
                }
                break;
            case "\x00\x14":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\ChannelOpen::decode($data);
                    case "\x00\x0B":
                        return Method\ChannelOpenOk::decode($data);
                    case "\x00\x14":
                        return Method\ChannelFlow::decode($data);
                    case "\x00\x15":
                        return Method\ChannelFlowOk::decode($data);
                    case "\x00\x28":
                        return Method\ChannelClose::decode($data);
                    case "\x00\x29":
                        return Method\ChannelCloseOk::decode($data);
                }
                break;
            case "\x00\x28":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\ExchangeDeclare::decode($data);
                    case "\x00\x0B":
                        return Method\ExchangeDeclareOk::decode($data);
                    case "\x00\x14":
                        return Method\ExchangeDelete::decode($data);
                    case "\x00\x15":
                        return Method\ExchangeDeleteOk::decode($data);
                    case "\x00\x1E":
                        return Method\ExchangeBind::decode($data);
                    case "\x00\x1F":
                        return Method\ExchangeBindOk::decode($data);
                    case "\x00\x28":
                        return Method\ExchangeUnbind::decode($data);
                    case "\x00\x33":
                        return Method\ExchangeUnbindOk::decode($data);
                }
                break;
            case "\x00\x32":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\QueueDeclare::decode($data);
                    case "\x00\x0B":
                        return Method\QueueDeclareOk::decode($data);
                    case "\x00\x14":
                        return Method\QueueBind::decode($data);
                    case "\x00\x15":
                        return Method\QueueBindOk::decode($data);
                    case "\x00\x32":
                        return Method\QueueUnbind::decode($data);
                    case "\x00\x33":
                        return Method\QueueUnbindOk::decode($data);
                    case "\x00\x1E":
                        return Method\QueuePurge::decode($data);
                    case "\x00\x1F":
                        return Method\QueuePurgeOk::decode($data);
                    case "\x00\x28":
                        return Method\QueueDelete::decode($data);
                    case "\x00\x29":
                        return Method\QueueDeleteOk::decode($data);
                }
                break;
            case "\x00\x3C":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\BasicQos::decode($data);
                    case "\x00\x0B":
                        return Method\BasicQosOk::decode($data);
                    case "\x00\x14":
                        return Method\BasicConsume::decode($data);
                    case "\x00\x15":
                        return Method\BasicConsumeOk::decode($data);
                    case "\x00\x1E":
                        return Method\BasicCancel::decode($data);
                    case "\x00\x1F":
                        return Method\BasicCancelOk::decode($data);
                    case "\x00\x28":
                        return Method\BasicPublish::decode($data);
                    case "\x00\x32":
                        return Method\BasicReturn::decode($data);
                    case "\x00\x3C":
                        return Method\BasicDeliver::decode($data);
                    case "\x00\x46":
                        return Method\BasicGet::decode($data);
                    case "\x00\x47":
                        return Method\BasicGetOk::decode($data);
                    case "\x00\x48":
                        return Method\BasicGetEmpty::decode($data);
                    case "\x00\x50":
                        return Method\BasicAck::decode($data);
                    case "\x00\x5A":
                        return Method\BasicReject::decode($data);
                    case "\x00\x64":
                        return Method\BasicRecoverAsync::decode($data);
                    case "\x00\x6E":
                        return Method\BasicRecover::decode($data);
                    case "\x00\x6F":
                        return Method\BasicRecoverOk::decode($data);
                    case "\x00\x78":
                        return Method\BasicNack::decode($data);
                }
                break;
            case "\x00\x5A":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\TxSelect::decode($data);
                    case "\x00\x0B":
                        return Method\TxSelectOk::decode($data);
                    case "\x00\x14":
                        return Method\TxCommit::decode($data);
                    case "\x00\x15":
                        return Method\TxCommitOk::decode($data);
                    case "\x00\x1E":
                        return Method\TxRollback::decode($data);
                    case "\x00\x1F":
                        return Method\TxRollbackOk::decode($data);
                }
                break;
            case "\x00\x55":
                switch ($method) {
                    case "\x00\x0A":
                        return Method\ConfirmSelect::decode($data);
                    case "\x00\x0B":
                        return Method\ConfirmSelectOk::decode($data);
                }
                break;
        }

        throw new \InvalidArgumentException(sprintf(
            'Invalid method received %d:%d',
            Binary::unpackbe('s', $class),
            Binary::unpackbe('s', $method)
        ));
    }

    /**
     * {@inheritdoc}
     */
    public function getFrameType()
    {
        return "\x01";
    }
}
