<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\AMQP091\Framing\Method;

use ButterAMQP\AMQP091\Framing\Frame;
use ButterAMQP\Value;

/**
 * Confirms a queue definition.
 *
 * @codeCoverageIgnore
 */
class QueueDeclareOk extends Frame
{
    /**
     * @var string
     */
    private $queue;

    /**
     * @var int
     */
    private $messageCount;

    /**
     * @var int
     */
    private $consumerCount;

    /**
     * @param int    $channel
     * @param string $queue
     * @param int    $messageCount
     * @param int    $consumerCount
     */
    public function __construct($channel, $queue, $messageCount, $consumerCount)
    {
        $this->queue = $queue;
        $this->messageCount = $messageCount;
        $this->consumerCount = $consumerCount;

        parent::__construct($channel);
    }

    /**
     * Queue.
     *
     * @return string
     */
    public function getQueue()
    {
        return $this->queue;
    }

    /**
     * MessageCount.
     *
     * @return int
     */
    public function getMessageCount()
    {
        return $this->messageCount;
    }

    /**
     * Number of consumers.
     *
     * @return int
     */
    public function getConsumerCount()
    {
        return $this->consumerCount;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $data = "\x00\x32\x00\x0B".
            Value\ShortStringValue::encode($this->queue).
            Value\LongValue::encode($this->messageCount).
            Value\LongValue::encode($this->consumerCount);

        return "\x01".pack('nN', $this->channel, strlen($data)).$data."\xCE";
    }
}
