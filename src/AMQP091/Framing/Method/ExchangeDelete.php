<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\AMQP091\Framing\Method;

use ButterAMQP\AMQP091\Framing\Frame;
use ButterAMQP\Value;

/**
 * Delete an exchange.
 *
 * @codeCoverageIgnore
 */
class ExchangeDelete extends Frame
{
    /**
     * @var int
     */
    private $reserved1;

    /**
     * @var string
     */
    private $exchange;

    /**
     * @var bool
     */
    private $ifUnused;

    /**
     * @var bool
     */
    private $noWait;

    /**
     * @param int    $channel
     * @param int    $reserved1
     * @param string $exchange
     * @param bool   $ifUnused
     * @param bool   $noWait
     */
    public function __construct($channel, $reserved1, $exchange, $ifUnused, $noWait)
    {
        $this->reserved1 = $reserved1;
        $this->exchange = $exchange;
        $this->ifUnused = $ifUnused;
        $this->noWait = $noWait;

        parent::__construct($channel);
    }

    /**
     * Reserved1.
     *
     * @return int
     */
    public function getReserved1()
    {
        return $this->reserved1;
    }

    /**
     * Exchange.
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     * Delete only if unused.
     *
     * @return bool
     */
    public function isIfUnused()
    {
        return $this->ifUnused;
    }

    /**
     * NoWait.
     *
     * @return bool
     */
    public function isNoWait()
    {
        return $this->noWait;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $data = "\x00\x28\x00\x14".
            Value\ShortValue::encode($this->reserved1).
            Value\ShortStringValue::encode($this->exchange).
            Value\OctetValue::encode(($this->ifUnused ? 1 : 0) | (($this->noWait ? 1 : 0) << 1));

        return "\x01".pack('nN', $this->channel, strlen($data)).$data."\xCE";
    }
}
