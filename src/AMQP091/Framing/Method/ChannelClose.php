<?php
/*
 * This file is automatically generated.
 */

namespace ButterAMQP\AMQP091\Framing\Method;

use ButterAMQP\AMQP091\Framing\Frame;
use ButterAMQP\Value;

/**
 * Request a channel close.
 *
 * @codeCoverageIgnore
 */
class ChannelClose extends Frame
{
    /**
     * @var int
     */
    private $replyCode;

    /**
     * @var string
     */
    private $replyText;

    /**
     * @var int
     */
    private $classId;

    /**
     * @var int
     */
    private $methodId;

    /**
     * @param int    $channel
     * @param int    $replyCode
     * @param string $replyText
     * @param int    $classId
     * @param int    $methodId
     */
    public function __construct($channel, $replyCode, $replyText, $classId, $methodId)
    {
        $this->replyCode = $replyCode;
        $this->replyText = $replyText;
        $this->classId = $classId;
        $this->methodId = $methodId;

        parent::__construct($channel);
    }

    /**
     * ReplyCode.
     *
     * @return int
     */
    public function getReplyCode()
    {
        return $this->replyCode;
    }

    /**
     * ReplyText.
     *
     * @return string
     */
    public function getReplyText()
    {
        return $this->replyText;
    }

    /**
     * Failing method class.
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->classId;
    }

    /**
     * Failing method ID.
     *
     * @return int
     */
    public function getMethodId()
    {
        return $this->methodId;
    }

    /**
     * @return string
     */
    public function encode()
    {
        $data = "\x00\x14\x00\x28".
            Value\ShortValue::encode($this->replyCode).
            Value\ShortStringValue::encode($this->replyText).
            Value\ShortValue::encode($this->classId).
            Value\ShortValue::encode($this->methodId);

        return "\x01".pack('nN', $this->channel, strlen($data)).$data."\xCE";
    }
}
